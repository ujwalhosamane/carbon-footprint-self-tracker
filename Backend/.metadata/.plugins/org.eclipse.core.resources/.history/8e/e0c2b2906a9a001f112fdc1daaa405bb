package com.carbon.footprint.service;

import java.util.List;
import java.util.Optional;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;

import com.carbon.footprint.dto.CarbonFootprintDTO;
import com.carbon.footprint.model.CarbonFootprint;
import com.carbon.footprint.repository.CarbonFootprintRepository;

public class CarbonFootprintServiceImpl implements CarbonFootprintServiceInterface {

	@Autowired
	private CarbonFootprintRepository carbonFootprintRepository;
	
	@Override
	public CarbonFootprint addFootprint(CarbonFootprintDTO footprintDto) {
			
		float totalFootprint = footprintDto.getTransportation() + footprintDto.getElectricity() +
				footprintDto.getLpg() + footprintDto.getShipping() + footprintDto.getAirConditioner();

		CarbonFootprint carbonFootprint = new CarbonFootprint();
		carbonFootprint.setUserId(footprintDto.getUserId());
		carbonFootprint.setFootprintMonth(footprintDto.getFootprintMonth());
		carbonFootprint.setFootprintYear(footprintDto.getFootprintYear());
		carbonFootprint.setTransportation(footprintDto.getTransportation());
		carbonFootprint.setElectricity(footprintDto.getElectricity());
		carbonFootprint.setLpg(footprintDto.getLpg());
		carbonFootprint.setShipping(footprintDto.getShipping());
		carbonFootprint.setAirConditioner(footprintDto.getAirConditioner());
		
		carbonFootprint.setTotalFootprint(totalFootprint);
		carbonFootprint.setCreationDate(new Date());
		
		return carbonFootprintRepository.save(carbonFootprint);
	}

	@Override
	public List<CarbonFootprint> getFootprintsByUserId(String userId) {
		List<CarbonFootprint> listCarbonFootprint = carbonFootprintRepository.findFootprintsByUserId(userId);
		
		return listCarbonFootprint.size() > 0 ?  listCarbonFootprint : null;
	}

	@Override
	public void deleteFootprint(Long footprintId) {
		carbonFootprintRepository.deleteById(footprintId);
	}

	@Override
	public List<CarbonFootprint> getAllFootprint() {
		
		return carbonFootprintRepository.findAll();
	}

	@Override
	public Optional<CarbonFootprint> findByUserIdAndMonthAndYear(String userId, String month, int year) {
		
		return carbonFootprintRepository.findByUserIdAndMonthAndYear(userId, month, year);
	}

	@Override
	public CarbonFootprint updateFootprint(CarbonFootprintDTO footprintDto, Long footprintId) {
		CarbonFootprint carbonFootprint = carbonFootprintRepository.findById(footprintId).orElse(null);
		
		if(carbonFootprint != null) {
			float totalFootprint = footprintDto.getTransportation() + footprintDto.getElectricity() +
					footprintDto.getLpg() + footprintDto.getShipping() + footprintDto.getAirConditioner();
			
			carbonFootprint.setFootprintMonth(footprintDto.getFootprintMonth());
			carbonFootprint.setFootprintYear(footprintDto.getFootprintYear());
			carbonFootprint.setTransportation(footprintDto.getTransportation());
			carbonFootprint.setElectricity(footprintDto.getElectricity());
			carbonFootprint.setLpg(footprintDto.getLpg());
			carbonFootprint.setShipping(footprintDto.getShipping());
			carbonFootprint.setAirConditioner(footprintDto.getAirConditioner());
			
			carbonFootprint.setTotalFootprint(totalFootprint);
			carbonFootprint.setCreationDate(new Date());
		}
		
		
		return carbonFootprint != null ?
				carbonFootprintRepository.save(carbonFootprint) :
					null;
	}
	
	public CarbonFootprintDTOs findByMonthAndYear(String month, int year) {
		Optional<CarbonFootprintDTO> footprintDto = carbonFootprintRepository.findSumsByMonthAndYear(month, year);
		return footprintDto.isPresent() ? 
				footprintDto.get() : 
					null;
    }

	@Override
	public List<CarbonFootprintDTO> findLastNMonthsSums(int n) {
        List<CarbonFootprintDTO> nMonthsResult = new ArrayList<>();
        
        Calendar calendar = Calendar.getInstance();

        for (int i = 0; i < n; i++) {
            calendar.set(Calendar.MONTH, calendar.get(Calendar.MONTH) - 1);
            String month = getMonthName(calendar.get(Calendar.MONTH));
            int year = calendar.get(Calendar.YEAR);
            
            CarbonFootprintDTO eachMonth = carbonFootprintRepository.findSumsByMonthAndYear(month, year).orElse(null);
            nMonthsResult.add(eachMonth);
        }

        return nMonthsResult;
    }
	

    private String getMonthName(int monthIndex) {
        String[] months = {
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        };
        return months[monthIndex];
    }

	@Override
	public List<CarbonFootprintDTO> findLastNmonthsSumsByUserId(String userId, int n) {
		List<CarbonFootprintDTO> nMonthsResult = new ArrayList<>();
        
        Calendar calendar = Calendar.getInstance();

        for (int i = 0; i < n; i++) {
            calendar.set(Calendar.MONTH, calendar.get(Calendar.MONTH) - 1);
            String month = getMonthName(calendar.get(Calendar.MONTH));
            int year = calendar.get(Calendar.YEAR);
            
            CarbonFootprintDTO eachMonth = carbonFootprintRepository.findSumsByUserIdAndMonthAndYear(userId, month, year).orElse(null);
            nMonthsResult.add(eachMonth);
        }

        return nMonthsResult;
	}

	@Override
	public CarbonFootprintDTO findAllSumsByUserId(String userId) {
		Optional<CarbonFootprintDTO> allSum = carbonFootprintRepository.findSumsByUserId(userId);
		return allSum.isPresent() ? allSum.get() : null;
	}
	
	

}
